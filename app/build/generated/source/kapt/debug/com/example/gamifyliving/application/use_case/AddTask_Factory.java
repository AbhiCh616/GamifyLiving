// Generated by Dagger (https://dagger.dev).
package com.example.gamifyliving.application.use_case;

import com.example.gamifyliving.application.repository.RewardRepository;
import com.example.gamifyliving.application.repository.TaskRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AddTask_Factory implements Factory<AddTask> {
  private final Provider<TaskRepository> taskRepositoryProvider;

  private final Provider<RewardRepository> rewardRepositoryProvider;

  public AddTask_Factory(Provider<TaskRepository> taskRepositoryProvider,
      Provider<RewardRepository> rewardRepositoryProvider) {
    this.taskRepositoryProvider = taskRepositoryProvider;
    this.rewardRepositoryProvider = rewardRepositoryProvider;
  }

  @Override
  public AddTask get() {
    return newInstance(taskRepositoryProvider.get(), rewardRepositoryProvider.get());
  }

  public static AddTask_Factory create(Provider<TaskRepository> taskRepositoryProvider,
      Provider<RewardRepository> rewardRepositoryProvider) {
    return new AddTask_Factory(taskRepositoryProvider, rewardRepositoryProvider);
  }

  public static AddTask newInstance(TaskRepository taskRepository,
      RewardRepository rewardRepository) {
    return new AddTask(taskRepository, rewardRepository);
  }
}
