// Generated by Dagger (https://dagger.dev).
package com.example.gamifyliving.application.use_case;

import com.example.gamifyliving.application.repository.CoinRepository;
import com.example.gamifyliving.application.repository.StatRepository;
import com.example.gamifyliving.application.repository.TaskRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ChangeTaskStatus_Factory implements Factory<ChangeTaskStatus> {
  private final Provider<TaskRepository> taskRepositoryProvider;

  private final Provider<StatRepository> statRepositoryProvider;

  private final Provider<CoinRepository> coinRepositoryProvider;

  public ChangeTaskStatus_Factory(Provider<TaskRepository> taskRepositoryProvider,
      Provider<StatRepository> statRepositoryProvider,
      Provider<CoinRepository> coinRepositoryProvider) {
    this.taskRepositoryProvider = taskRepositoryProvider;
    this.statRepositoryProvider = statRepositoryProvider;
    this.coinRepositoryProvider = coinRepositoryProvider;
  }

  @Override
  public ChangeTaskStatus get() {
    return newInstance(taskRepositoryProvider.get(), statRepositoryProvider.get(), coinRepositoryProvider.get());
  }

  public static ChangeTaskStatus_Factory create(Provider<TaskRepository> taskRepositoryProvider,
      Provider<StatRepository> statRepositoryProvider,
      Provider<CoinRepository> coinRepositoryProvider) {
    return new ChangeTaskStatus_Factory(taskRepositoryProvider, statRepositoryProvider, coinRepositoryProvider);
  }

  public static ChangeTaskStatus newInstance(TaskRepository taskRepository,
      StatRepository statRepository, CoinRepository coinRepository) {
    return new ChangeTaskStatus(taskRepository, statRepository, coinRepository);
  }
}
